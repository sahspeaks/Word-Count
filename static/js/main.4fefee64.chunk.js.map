{"version":3,"sources":["components/Navbar.jsx","components/TextForm.jsx","components/About.jsx","components/Alert.jsx","App.jsx","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","backgroundColor","placeholder","name","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","upper","split","map","str","charAt","slice","join","document","getElementById","select","navigator","clipboard","writeText","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","element","createElement","file","Blob","href","URL","createObjectURL","download","click","length","About","Alert","alert","word","lower","capitalize","App","setMode","setAlert","message","setTimeout","body","exact","path","rootElement","createRoot","render"],"mappings":"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","file":"static/js/main.4fefee64.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-light\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              onClick={props.toggleMode}\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable {props.mode === \"light\" ? \"dark\" : \"light\"} Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\n// import { ReactDOM } from \"react-dom\";\r\n\r\nfunction TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On cahnge \");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to UpperCase\", \"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase\", \"success\");\r\n  };\r\n  const handleClerClick = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Cleared the Text-Box\", \"success\");\r\n  };\r\n  // Function to capitalize  first letter of each word\r\n  const handleCapitalize = () => {\r\n    function capitalize(str) {\r\n      return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n    }\r\n    const upper = text.split(\" \").map(capitalize).join(\" \");\r\n    setText(upper);\r\n    props.showAlert(\"Capitalized Successfully\", \"success\");\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let newText = document.getElementById(\"textArea\");\r\n    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    props.showAlert(\"Text Copied to ClipBoard\", \"success\");\r\n  };\r\n  const handleRemoveClick = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n  };\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance();\r\n    msg.text = text;\r\n    window.speechSynthesis.speak(msg);\r\n  };\r\n  const downloadTxtFile = () => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([text], {\r\n      type: \"text/plain\"\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"Word-CountFile.txt\";\r\n    element.click();\r\n    props.showAlert(\"Download Would be Started Soon\", \"success\");\r\n  };\r\n  return (\r\n    <div\r\n      className=\"container\"\r\n      style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n    >\r\n      <h1>{props.title}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          style={{\r\n            backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n            color: props.mode === \"light\" ? \"black\" : \"white\"\r\n          }}\r\n          placeholder=\"Enter the text\"\r\n          name=\"content\"\r\n          className=\"form-control\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          id=\"textArea\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>\r\n        Convert to Uppercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLowClick}>\r\n        Convert to Lowercase\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCapitalize}>\r\n        Capitalize\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClerClick}>\r\n        Clear Text\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleCopyClick}>\r\n        Copy Text\r\n      </button>\r\n      <button className=\"btn btn-primary mx-2 my-2\" onClick={handleRemoveClick}>\r\n        Remove Extra Spaces\r\n      </button>\r\n      <button\r\n        type=\"submit\"\r\n        onClick={speak}\r\n        className=\"btn btn-outline-info mx-2 my-2\"\r\n      >\r\n        <i className=\"fa-solid fa-volume-high\"></i>\r\n      </button>\r\n      <button className=\"btn\" onClick={downloadTxtFile}>\r\n        <i className=\"fa-solid fa-file-arrow-down fa-2x\"></i>\r\n      </button>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words & {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.008 * text.split(\" \").length} Minutes will be taken to read above\r\n          lines\r\n        </p>\r\n        <h3>Preview</h3>\r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [myStyle, setMyStyle] = useState({\r\n  //   color: \"black\",\r\n  //   backgroundColor: \"white\",\r\n  //   border: \"1px solid white\"\r\n  // });\r\n  // const [btnText, setBtnText] = useState(\"Enable Dark mode\");\r\n\r\n  // const toggleStyle = () => {\r\n  //   if (myStyle.color === \"black\") {\r\n  //     setMyStyle({\r\n  //       color: \"white\",\r\n  //       backgroundColor: \"black\"\r\n  //     });\r\n  //     setBtnText(\"Enable Light Mode\");\r\n  //   } else {\r\n  //     setMyStyle({\r\n  //       color: \"black\",\r\n  //       backgroundColor: \"white\"\r\n  //     });\r\n  //     setBtnText(\"Enable Dark Mode\");\r\n  //   }\r\n  // };\r\n  return (\r\n    <div className=\"container my-3\">\r\n      <h1>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button\r\n              className=\"accordion-button\"\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\"\r\n              }}\r\n              // style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n              Accordion Item #1\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            aria-labelledby=\"headingOne\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div\r\n              className=\"accordion-body\"\r\n              // style={myStyle}\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\"\r\n              }}\r\n            >\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\"\r\n              }}\r\n              // style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              Accordion Item #2\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingTwo\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div\r\n              className=\"accordion-body\"\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\"\r\n              }}\r\n              // style={myStyle}\r\n            >\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"white\" : \"white\"\r\n              }}\r\n              // style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              Accordion Item #3\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"headingThree\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div\r\n              className=\"accordion-body\"\r\n              style={{\r\n                backgroundColor: props.mode === \"light\" ? \"white\" : \"#1b1919\",\r\n                color: props.mode === \"light\" ? \"black\" : \"white\"\r\n              }}\r\n              // style={myStyle}\r\n            >\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees\r\n              control the overall appearance, as well as the showing and hiding\r\n              via CSS transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import Navbar from \"./components/Navbar\";\nimport \"./styles.css\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nexport default function App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const handleToggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#1b1919\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Word Count\" mode={mode} toggleMode={handleToggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <TextForm\n                showAlert={showAlert}\n                title=\"Enter the text to analyze\"\n                mode={mode}\n              />\n            }\n          />\n          <Route exact path=\"/about\" element={<About />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\n// {\n//   /* <TextForm\n//             showAlert={showAlert}\n//             title=\"Enter the text to analyze\"\n//             mode={mode}\n//           /> */\n// }\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}